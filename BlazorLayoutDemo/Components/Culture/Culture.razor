@using System.Globalization
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Options
@inject NavigationManager NavigationManager
@inject IOptions<RequestLocalizationOptions> LocOptions
@{
    var uri = new Uri(NavigationManager.Uri)
        .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
}
<select @onchange="ChangeCulture">
    @foreach (var culture in LocOptions.Value.SupportedUICultures!)
    {
        <option value="@culture.Name" selected="@(culture.Name == CultureInfo.CurrentCulture.Name)">@culture.DisplayName</option>
    }
    
</select>

@code {
    private void ChangeCulture(ChangeEventArgs e)
    {
        var culture = (string?)e.Value;
        var uri = new Uri(NavigationManager.Uri)
            .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var query = $"?culture={Uri.EscapeDataString(culture!)}&redirectUri={Uri.EscapeDataString(uri!)}";

        NavigationManager.NavigateTo("/Culture/SetCulture" + query, forceLoad: true);
    }
}