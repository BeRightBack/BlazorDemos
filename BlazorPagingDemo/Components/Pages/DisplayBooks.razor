@page "/display-books"

@using BlazorPagingDemo.Data
@using BlazorPagingDemo.Services

@inject BookService BookService
@inject IGenericService<Book,MyDbContext> GenericService

<h2 class="bg-success text-white">Books-Pagination Test</h2>

<table class="table table-sm table-bordered table-striped ">
    <thead>
        <tr>
            <th>Id</th>
            <th>Title</th>
            <th>Author</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Book book in books)
        {
            <tr>
                <td>@book.Id</td>
                <td>@book.Title</td>
                <td>@book.Author</td>
            </tr>
        }
    </tbody>
    <tfoot>
        <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                    PageIndex="@State!.PageIndex"
                    Radius="3"
                    OnSelectedPage="@SelectedPage">
        </Pagination>
    </tfoot>
</table>

@code {  
    [CascadingParameter]
    PageIndexStateProvider? State { get; set; }

    private IEnumerable<Book>? allBooks = null;
    private IEnumerable<Book> books = Enumerable.Empty<Book>();

    // private int pageIndex = 1;
    private int itemsPerPage = 15;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        BookService.AddRandomBooks(500);
        // Initialize State if it's null
        State = State ?? new PageIndexStateProvider();

        allBooks = await GenericService.GetAllAsync();
        
        if (allBooks != null)
        {
            // Initialize the number of "totalPages"
            totalPages = (int)(allBooks.Count() / itemsPerPage);

            // Initialize the "books" which will be displayed when the page loaded first time.
            if (State == null)
            {
                throw new Exception("State is null");
            }
            var skipCount = itemsPerPage * (State.PageIndex - 1);

            books = allBooks.Skip(skipCount).Take(itemsPerPage);
        }
    }

    private void SelectedPage(int selectedPageIndex)
    {
        if (allBooks != null)
        {
            State!.PageIndex = selectedPageIndex;
            var skipCount = itemsPerPage * (State.PageIndex - 1);
            books = allBooks.Skip(skipCount).Take(itemsPerPage);
        }
    }
}