@using System.Reflection
@typeparam TEntity
@typeparam TModel

<input type="text" @oninput="SearchTable" placeholder="Search..." />

@if (entities!.Count > 0)
{
    <div class="container-fluid">
    <table class="table table-sm table-bordered table-striped ">
        <thead>
            <tr>
                @foreach (var model in models!)
                {
                    <th scope="col" @onclick="() => SortTable(model?.ToString()!)">@model</th>
                }
            </tr>
        </thead>
        <tbody>

                @foreach (var _entity in GetPage())
                {
                    <tr>
                        @foreach (var _model in models!)
                        {
                            <td class="align-middle">
                                @_entity!.GetType().GetProperty(_model?.ToString()!)!.GetValue(_entity, null)
                            </td>
                        }
                        <td class="align-middle">
                            <button type="button" class="btn btn-sm btn-info">Update</button>
                        </td>
                        <td class="align-middle">
                            <button type="button" class="btn btn-sm btn-danger">Delete</button>
                        </td>
                    </tr>
                    }                  

            </tbody>
            <tfoot>
                
                    @if (totalPages > 1 && GetPage().Any())
                    {
                        <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                                    PageIndex="@State!.PageIndex"
                                    Radius="3"
                                    OnSelectedPage="@SelectedPage">
                        </Pagination>
                    }
            </tfoot>
    </table>

    </div>
}
else
{
    <span>
        Loading entities...
    </span>
}

@code {
    [Parameter]
    public List<TEntity>? entities { get; set; }

    [Parameter]
    public List<TModel>? models { get; set; }

    [CascadingParameter]
    PageIndexStateProvider? State { get; set; }

    private int itemsPerPage = 15;
    private int totalPages = 1;

    private string currentSortColumn = "";
    private bool sortAscending = true;
    private string searchString = "";
    private List<TEntity>? filtered;
    private Dictionary<string, PropertyInfo> propertyCache = new Dictionary<string, PropertyInfo>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        State = State ?? new PageIndexStateProvider();

        if (entities == null)
        {
            throw new ArgumentNullException(nameof(entities), "Entities cannot be null.");
        }

        filtered = entities.ToList();

        totalPages = (int)Math.Ceiling((double)filtered.Count / itemsPerPage);
    }

    private void SelectedPage(int selectedPageIndex)
    {
        State!.PageIndex = selectedPageIndex;
    }

    private IEnumerable<TEntity> GetPage()
    {
        var skipCount = itemsPerPage * (State!.PageIndex - 1);
        return filtered!.Skip(skipCount).Take(itemsPerPage).ToList();
    }

    private void SortTable(string column)
    {
        if (column == currentSortColumn)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            currentSortColumn = column;
            sortAscending = true;
        }

        var propertyInfo = GetPropertyInfo(currentSortColumn);
        filtered = sortAscending ? entities?.OrderBy(e => propertyInfo!.GetValue(e, null)).ToList() :
            entities?.OrderByDescending(e => propertyInfo!.GetValue(e, null)).ToList();
    }

    private void SearchTable(ChangeEventArgs e)
    {
        searchString = e.Value?.ToString()!;
        filtered = entities?.Where(e => GetPropertyInfos(e)
            .Where(p => p.PropertyType == typeof(string))
            .Select(p => (string?)p.GetValue(e))
            .Any(value => value!.Contains(searchString))).ToList();
            totalPages = (int)Math.Ceiling((double)filtered!.Count / itemsPerPage);
    }

    private PropertyInfo? GetPropertyInfo(string propertyName)
    {
        if (!propertyCache.TryGetValue(propertyName, out var propertyInfo))
        {
            propertyInfo = typeof(TEntity).GetProperty(propertyName);
            if (propertyInfo != null)
            {
                propertyCache[propertyName] = propertyInfo;
            }
        }

        return propertyInfo;
    }

    private IEnumerable<PropertyInfo> GetPropertyInfos(TEntity entity)
    {
        var type = entity!.GetType();
        foreach (var property in type.GetProperties())
        {
            var propertyInfo = GetPropertyInfo(property.Name);
            if (propertyInfo != null)
            {
                yield return propertyInfo;
            }
        }
    }
}
