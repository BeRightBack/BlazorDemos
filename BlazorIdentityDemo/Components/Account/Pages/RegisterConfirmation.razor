@page "/Account/RegisterConfirmation"

@using System.Text
@using BlazorIdentityDemo.Entity
@using BlazorIdentityDemo.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorIdentityDemo.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

<StatusMessage Message="@statusMessage" />


    <p>Please check your email to confirm your account.</p>


<p>
        If you haven't received the email, please click the button below to resend the confirmation email.
</p>

<button class="btn btn-primary" @onclick="ResendEmail">Resend confirmation email</button>
    
@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        } 
    }

    private async Task ResendEmail()
    {
        var user = await UserManager.FindByEmailAsync(Email!);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
            return;
        }

        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = $"{NavigationManager.BaseUri}Account/ConfirmEmail?userId={user.Id}&code={code}";

        await EmailSender.SendConfirmationLinkAsync(user, Email!, callbackUrl);
        statusMessage = "Confirmation email sent. Please check your email.";
    }
}
